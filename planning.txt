30th of October, 2023

We're going to review our text library. Last time we were able to make something that was useable, and achieved most of the goals we set out for. But The pagination at the end was messy, and I seriously lost track of how things worked under the hood. Also I got confused about how to handle different types of effects. I'm confident the linked list system could accomodate almost any effect. I remember rotation being kind of weird, but I'll come back to that one.

Let me get a few thoughts down first. I remember the jitter effect being problematic. That's the one were random characters would jump out of position for a few frames. This one is tricky because it affects different characters at different times. I believe we can review and make our system that affects the linked list more solid. We should focus on making it easy to manipulate the linked list first before remaking text parsing.

We also need to take pagination into account sooner.

We should also consider using the same logic we're considering for the jitter effect for typing. In-fact "typing" could actually be an effect just like any other. I suppose they'd need to be slightly different so the user can affect typing state at any point, but we'll get to that. So in summary:

Review linked list system so effects can easily be made for it.
Ensure pagination is considered for all steps.
Consider making typing an "effect" just like all other effects.

Perhaps for grouping effects, we should ask the user to supply a "name" for the effect. This way our normal closing tag of <> would apply to everything except named effects. Here's an example I'm thinking of:

"Hello world. <jitter-myeffectname:1,2,3>Everything shakes today.<myeffectname> But I feel <wave> solid<>."


2nd of November, 2023

Something that feels wrong is the upward and circular references that exist in the current system. A character array should contain references to characters. But characters have references to drawables. And drawables have references to the same character array that references the characters. I wonder if there's a way to disconnect these references so lower level building blocks aren't aware of each other. I do know why we did this in the first place. It was so that all characters were always aware of what drawable was drawing them, and so drawables could reference the original styles based on the character array. Although this system worked, it doesn't feel right. Let's see if we can't think of a way to remove circular references.


21st of November, 2023

I found myself wishing I could use this library recently, for a typing game. I wanted to be able to set the color of text mid-way. Green at the start and red at the end. We should definitely rework this library a bit so it's easy to do that. And in that case, we wouldn't want to use in-text tags. We'd want something like:

text_set_color(text, color, index_start, index_end);

I have some vague memory of trying to design it like this originally. And design the text typing and animation effects to use these functions.

Yes, on looking it over it looks like that's exactly how we designed it. However I left all the style setting functions internal. Also, it's clear that it's in the styleable text that pagination should occur. If we reflect on our original thoughts, the alterable values of any text are:

font
color
alpha
scale_x
scale_y
mod_x
mod_y
angle
sprite (now quite a style but matters)

And of those: font, scale_x/y, and sprite change how text could actually be positioned. So anytime we change one of those, we need to recalculate line breaks.

We're going to continue using our concept of drawables, items that exist in a linked list that contain information about how to draw text. And our animations/styles will modify these drawables.

Something to note is that when we modify any of these styles, we'll have to recalculate drawables. In our original design we had an array of characters, each containing a default style, from which drawables were calculated. And animations would update drawables after calculated from styles. 

I was thinking to myself "Why even have the character array? Can't we just have drawables modified on the fly?" But I'm pretty sure we ran into situations where we needed to "reset" drawables. But how do you know what to reset the styles to? We need some sort of anchor. This is also a key difference between how animations will work and regular styles. Actually, let's quickly check the render function for our text. There was something important about the order of when we cut and merge drawables. Ah, I think it was as simple as merging drawables, then splitting them, then updating the styles on those drawables. The draw function is this:

loop over drawables and reset styles for each
loop over animations and merge drawables
remove finished animations
loop over animations and split drawables
loop over animations and update drawables

We'll remember this for the future.

So the logic of handling animations makes sense to me. And our model of style, character, and drawable mostly makes sense too. Earlier we discussed removing the circular reference between characters and drawables. I think we can accomplish this by making characters store a reference to drawables, and drawables do not store a reference to character. And the functions for splitting and merging drawables will exist outside of the drawable model.

So, let's review how we could redo the initial text logic to include pagination. Actually this might be very simple. First recall that we'll execute this logic whenever a space altering style changes somewhere. And these changes are applied to the character array. Also recall we keep track of what line a character is on with a line_index field in the character. So to determine line breaks, we simply assign this incrementing number to each character. Once we've done this, we can determine the height of lines by finding the highest character in each line. Now that we have that information we could easily determine which lines should be on which pages based on the height limitation given by the user. 

Perhaps we could assign pages to characters the same way we assign lines. With an index value. And the text class could store the page to display with a basic variable as well. When it comes to drawing, we can know which drawable to start with by finding the first character of the current page, and using whatever drawable it points to. Luckily because of our concept of splitting and merging, drawables will never overlap with the next page. So we could just draw drawables until we find a drawable whos character isn't the current page (or we find the last drawable). Actually it occured to me we may not even need the linked list concept anymore if the character array is going to reference drawables.

This system makes sense to me. Let's summarize:

New verison will retain models of styles, characters, and drawables. Characters contain a line and page index. The text class on creation will determine the x/y position, line index, and page index of every character. Then, drawables will be generated from the characters. The text is now complete and ready to be rendered.

Note: during parsing we might also want to store information about start and ends of lines excluding spaces. Later this will help us draw text with different alignments.

Once text is created, the user will have access to functions which change the styles of the characters. For starters, since we'll already have logic which generates characters from drawables, we can simply run that again. But for performance we may want to only run the entire logic again for styles which change size of characters.

Finally we'll need to create draw functions for the text class which only draw the current page. 

Once we create this we could experiment with a crude typing system that just sets the alpha of text. And possibly a few other animations. The new system makes sense to me. I think we can try implementing this next time.


25th of November, 2023

It occured to me we may not need line index. We could just use the y position of characters.


27th of November, 2023

Still working through line break and pagination. Working slowly, and was distracted by Thanksgiving.
Random thought I had about text rotation:
We need to offset the draw x/y of text in order for the rotation to appear around the center. But since we'd want to be able to set offset and rotation separately, I think it makes sense if the rotation/angle setting had its own offset values. Furthermore, it occured to me that each individual character requires a different offset if drawn individually. I think we should store this information in the characters. But if the characters all end up with different offset values, our original logic for determining if a drawable can be merged will flag each character with rotation data as separate. This feels inefficient. Further more... how do we determine the center if there's a line break? I'm starting to think text rotation might not be worth the effort. Maybe we just allow for individual characters to rotate around their center.

Just managed to get basic line breaks and character positions. I was thinking about whether or not I wanted a separate style class to be held by both characters and drawables. However I realized that since we're containing everything within the text class, and characters will reference drawables, why even give the drawables a style? Actually, the drawable just needs to be an index range. We know that drawables will refer to index ranges, and the characters in those index ranges already contain those styles. So when it comes to drawing all we really need from the drawable is the start index, and the characters to draw, because we can get the styles using the start index in the character array. The end index really is just a way to refer to the next drawable. 

So let's start adding drawables, but recognize they just need index range and text content.

Actually, no, let's make sure we've got pagination first. That was the feature that seriously threw us off at the end last time.

This is giving us trouble again. Let's review some logic. Our current system only tracks where the x/y position of characters should be. For pagination we need lines to start on new pages if their height would bring the page height beyond the given user height limit. However we will always allow one line per page no matter the height limit. So if the first line of text is 60px high, but our height limit is 50px, we still have that first line of text on the first page. 

It would be most elegant to figure out how to assign pages to characters as we're parsing through them for line breaks. But this won't work, and that's because we can't know the height of a line until we've parsed through all characters in a line. So if the very last character ends up being to high, and makes the line too big, we have to assign a new page value to that entire line. We may have to do something similar to our older system where we keep track of line heights, determine pages for each line, then go back over the characters and reassign page index to each character.

Actually, now that I'm getting my head back into the old logic, I think it does make sense to give a line index to each character. Although we can easily give y positions to characters while determining line breaks, we'll have to redo y positions when assigning pages. And using the existing y position for an "index" just ends up being messy.

We've got functioning page break now. I'm also reminded we don't have a way to do right or center aligned text. Perhaps we should also think through tracking the ends of lines now. Actually, if I'm thinking about this correctly, we just need to store the width of the line. Once we have that we can use the width of the text box, the width of the line, and the difference between the two to determine center or right aligned text. Maybe we can shove a mapping of that into our existing logic.

That was pretty simple to solve. I think getting the heights of pages might also be a bit tricky but if we already have logic to handle something as strange as space excluded width, we should be able to add page width/heights in quickly too. Let's not worry about making a char array draw version of thsi since we won't use that in the final version. I think recreating the drawable logic is the next major step. 

It occurs to me that we can initiate each character with its own drawable. And all we have to make is the merge drawables function.

Another observation. I was thinking we could do away with drawable styles completely, but of course, the whole point of having these things is so we can modify how characters are drawn temporarily. Emphasis there on "temporary". If the style change is temporary we have to store it separately from the base style which is stored on the characters. 

Adding drawables wasn't too bad. Now I'm considering how our logic for splitting, and merging drawables originally worked. The issue is right now drawables could merge together if their styles are equal. But what if the base styles for the underlying characters are different within one drawables, which somehow has gotten temporarily set as the same? If we wanted to reset the styles of that drawable we'd have to somehow know that the drawable must be split. Frankly I can't think of any sort of elegant way to track this. And the only way to check if the drawable has a base style change mid-way is to iterate over each character, which is exactly what we're trying to avoid. Therefor I think we shouldn't allow drawables to merge if the base styles of the characters couldn't also merge. This way, whenever we reset the styles of drawables, we just have to reset them to the styles of the first character, and we can be confident this is correct.

Small note: I can't remember if we have to manually destroy data structures like maps and arrays. The memory usage of our test program definitely grows over time when repeatedly creating new text instances. But it's possible these data structures will automatically get destroyed and we just aren't hitting enough memory during debug to warrant garbage collection. Let's not worry about it for now, but keep it in mind as we proceed.

Nevermind. We were able to replace the maps used with arrays, which are automatically garbage collected. We confirmed this by letting the test run for about 10 mintues, and the memory usage of the game actually went down over time.

We seem to have a good core going. Let's start adding default style setters.

I've hit a logic roadblock. It's not clear to me how best to rebuild drawables when setting default styles. If we have temporary styles applied to indexes 20-30, and we apply to a default style to indexes 40-50, then what happens to the temporary styles at 20-30? If the style is something that doesn't affect position/line breaks (alpha, color, offset) then I'm pretty sure we could just change the default styles in the char array and rebuild the drawables of just the changed section. But for anything that affects width or height we have to do line break logic again. And that means resetting the drawables. Maybe we just don't solve this problem and include a note in the documentation instead. Changing certain default styles will reset temporary styles. Actually, heck, let's just make all of them reset temporary styles (reset the drawables). It'll be easier.

Another observation about garbage collection. At least on the machine I'm using now, the garbage collection might happen around 600mb of memory usage. I added one field to the text class "text_source", which is just the string the text is built from. This triggered the memory usage to grow. But I know string references shouldn't be a major data usage. So from this I'm comfortable claiming there's no reason to be concerned about memory usage unless we go past that 600mb amount (might be different on other machines).

Uh, I've decided I have no idea how the garbage collection works. I'm going to try and not worry too much about memory growing with repeated text creations. Unless I see it really skyrocket I'm pretending this isn't a problem.


28th of November, 2023

We realized a flaw in our force new line logic. When a character is marked as the start of a new line, the process is simpler than I thought. We already have logic to start a new line if the existing word is too long. It's just a few lines of simple code. So when a character forces a new line, we simply perform our existing logic to add current word to the current line (which already brings that word to a new line if needed). But then also start a new line after that.

Our default style setters appear to be working. I've noticed a small issue I think we should address now. When adding large sprites, or vertically scaling text, the rest of the text is drawn from the top. IMO this looks dumb and no one is ever going to want this. I think we should setup text drawing so text is always drawn in the middle of the line. We should be able to easily determine the height of a drawable, compare this against the height of the line, and draw the text in the middle properly.

Making the lines center wasn't too bad. I think we should finish implementing text alignment. It should copy the way the existing draw text works, where right or center align draw the text right or center aligned from the given x/y position, in addition to changing the position of the text lines. The big thing that must be added for this is stored dimensions for each page.

Although we've gotten the text alginment working, something is off. We have text extending passed our debug border. Will have to do some exploring to figure out why this is happening. After fixing this we'll have to do some reflecting to determine what feature to work on next.

Nevermind figured it out. The issue was using text_width instead of page_width to determine offset.

The next major step is creating temporary style changes. These are changes that only affect drawables. As part of this addition, I think we should do a small rework to how the text gets initially built. Instead of having the entire text rebuild when any default changes occur, we should demand the user "build_drawables" for a text. This will set the library up for better performance later when we need to actually use it for text where the effects are parsed from tags.

Actually, let's rethink this a bit. The whole point of changing to requiring a build function before drawing is so we can apply styles without require a rebuild of the entire string. However, this is exactly what temporary styling will let us do. In-fact I believe the only reason we have default styles is so that typing effects, or other animations which will eventually give up control of the style of a character, will have a style to return to.

Well, actually, I've reconvinced myself of the value of requiring a build function. I was starting to think requiring default styles at all was unecessary since for something simple like changing the color of text or whatever doesn't need some whole rewrite of the system. But actually, it does. Especially stuff that triggers line breaks. So let's go with the rebuild requirement for now. Next step is temporary styles.

Adding temporary styles wasn't too hard. Since our system has functioning drawables, all we really needed to do was add the drawable split function, and then a bunch of functions that set the styles of drawables at indexes. 

Next, we should review how to handle animations. Luckily our system last time was quite good IMO. We just need to adapt it. Entry (and exit) animations might be the trickiest.


29th of November, 2023

Ok. I believe our old animation system was a sort of wrapper around the styled text library. It contained a styled text element, as well as animation elements (let's worry about how we stored the animations later). The animation elements contained all the information necessary to modify the text. For example an alpha pulse animation would know which characters it affected, and what to set the alpha values of said characters to each update.

Something I've also been thinking about is the deterministic nature of these animations. In the old system they were all basically customizeable functions. Where the only input was an "update time", and the animation would modify text to the correct values based solely on this. This is straight forward for something like alpha fading, offset floating, or similar. But was more complex for something like shake which required random values. And we never figured out the random twitch animation. So, I'm considering not doing it like this. It's cool to make the animations very functional like this, but also makes life harder for us. And in the case of the twitch animation, I don't know what to do.

Ah... but the functional animations feel so elegant. Perhaps a compromise? We'll make as many animations functional as we can. But abandon it for weirder or more difficult ones. We could still insist on updating animations based on a number of milliseconds. The functional ones would store the number of milliseconds passed, and simply determine their animation from this single value. The non-functional ones would instead update internal values based on how much time they're updated by. I think that's the best way forward for now.

But let's think about typing effects. This is where entry animations come into play. Originally I believe we had some sort of system where we added an entry animation for every single character. And I believe characters also had a "visible" field that determined if they were drawn at all. I'm think we could rework our draw logic to simply skip drawing if a drawables alpha is 0. As for the animations themselves, I was thinking briefly that we could make a single animation that tracks the exact style of each character it's currently typing, has finished typing, and needs to type. But I almost feel like this is more work than simply tracking typing state, and creating an animation for each typed character. Perhaps we should do a sort of hybrid where we set the alpha of all typed/untyped characters. But also create animations for individual characters when they get typed.

I was looking over the old system. I forgot that we would merge the drawables at a specific index after making a character visible. I'm stuck thinking through the optimal way to cut up and merge drawables when typing. I think it'd be inefficient for the typing system to set the visibility of drawables every update. It seems like text that's already finished typing shouldn't be affected by typing at all. Similarly, text that hasn't been typed yet shouldn't have to be set as invisible. Therefore I think we should re-introduce the conecept of "hidden" or "visible" for characters. However, if this function is going to be useful then it will also have to set the drawables of the characters at the same time. Ah, crap, I also just realized we can't use alpha for this. If we set the default alpha of a character to be 0.6 or whatever, we can't set it to 0, or times it by 0, there's no way to set it back. We'd have to store it somewhere separately. Let's just have the visible flag instead.

Or am I being too dramatic? Maybe it's totally fine to simply have the typing system set the alpha for untyped chars to 0. Adding a whole new flag to the characters seems extreme as well. I bet the performance won't be that bad, and the performance will be even better once we rig the draw logic to skip if alpha is 0. I feel like that will offset it.

Ah, I just had another thought about what the library should even be doing. You see "typing" really is a different concept from text with animations IMO. I'm starting to think we should make the text library only deal with cool styles, animations, and the whole built-in style tags feature. But then we should have a separate library which determines how text types. Although it's probably possible for us to include typing right in the library, this might be more userfriendly. I was browsing through the Scribble library, and it looks like Scribble has a similar separation between text rendering and typing.

Ok, let's commit to this new path forward. We'll complete the TagDecoratedText without typing effects. But then we'll create a wrapper library that uses tag decorated text to type.

Given this, let's think of how our tag decorated wrapper will work. One thing to remember, since we just discussed separating typing, it must be possible to still modify the styles of characters after text creation. However I'm only worried about changing teporary styles here. The trick here is setting styles that don't get overwritten by animations. In our final product, animations will be updated and modify the text during draw. But sense drawing is the last thing to happen, and style changes by the user will happen before the animations. For some traits like offset that won't matter. But color cannot be adjusted, only set. So we need to set this up in a way where the user can obviously update the text and the animations without them colliding with eachother. 

Oh, I wonder if we could just rig up the draw/update function so animation updates happen after drawing. This way the user would never be able to have their changes overwritten by the draw. Though we would still need to inform the user their changes are overwritten by draw itself. I think this is inevitable because we need drawables to revert their styles to the default characters in order for animations to work properly. This makes sense. I think what we need to do next is create an animation wrapper class, and animations. Then make the tag parser wrapper class, and any utility functions.

Ack... I'm flip flopping. After looking over the old animation code, it does seem elegant to integrate typing directly into the system. I mean we basically had something working originally. It was just inefficient. And indeed that's the whole reason we started redoing this, just to fix the efficiency. Screw it. We'll do it the old way. We'll just remember to do animations with a mix of functional and non-functional. Also the animations won't have reference to the text. We'll have the parent animation class update the animations, then modify the text based on the updated animation.

Man I've done a lot of planning writing today instead of coding.

Just came back to write up animations but browsed over the old code again. Had to remind myself how we handled keeping track of "typed" characters. We would modify a "visible" field that determined if a character could even be drawn. It looks like the modification didn't immediately affect the drawables. So I'm guessing the drawables would be initialized to the characters?

Either way. I think we don't have to do this. We actually pointed this out earlier. The typing system could simply set the alpha of untyped characters to 0. We got distracted from this idea because we were considering separating the logic of displaying animations from typing. truthfully, I think our old system basically did this. For characters that have been typed, we simply don't set their alpha to 0. And if we want cool typing effects, our concept of animations that delete themselves should work fine. Ok, let's start adding animations in.

Apparently structs can be used like maps. You can even use integers as field names. That's wonderful.

We have default setters, which only set the style of the character array. I think we should change these. These functions should not be publicly accessible as it seems wrong to ask the user to understand what "drawables" are and to "build" them after setting character values. Instead these should be internal. But we will make new versions of these functions which change the underlying character style as well as the drawable.

I also think we need to add the targeted merge function we had before. This will be needed by typing animations. Remember that we really don't need to be cutting apart and merging the drawables on a finished set of text. And similarly, we don't need to iterate through all mergeables except for on text creation.

Or, maybe not? We do want to give users the ability to change styles temporarily, and the drawable cuts from those style changes will need to be merged at some time. Maybe we'll just merge all drawables at some point during the update cycle for now, and worry about optimization later.

Just realized we could think of the animation wrapper as an "animator". And ask it to pass in an existing styleable text instance.

Added some framework for animations, and tested a fadein animation. Merging all drawables after drawing is very inefficient. I think it's worth adding in the targeted merge function.
